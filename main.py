import telebot
import time
import random
import psycopg2
import exam_functions as ef
from get_env import get_env_data_as_dict

env = get_env_data_as_dict('/usr/med_exam_prep/.env')

conn = psycopg2.connect(
    host='localhost',
    database=env['PG_DB'],
    user=env['PG_USER'],
    password=env['PG_PWD']
)

bot = telebot.TeleBot(env['TG_BOT_TOKEN'])

@bot.message_handler(commands=['start'])
def send_welcome(message):
	
	bot.reply_to(message,
	('–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –≥–æ—Å —ç–∫–∑–∞–º–µ–Ω—É.\n'
	'–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–µ—Ä–≤–∏—Å–µ.\n'
	f'–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä - {message.chat.id}\n'
	'–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å.'))

	# num_of_questions = ef.get_num_of_questions(conn)

	bot.send_message(message.chat.id,
	(f'–í –±–∞–∑–µ  2 –Ω–∞–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤:\n'
	'1 - 139: –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n'
	'139 - 1336: —ç–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏—è'
	'–ß—Ç–æ–±—ã –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å n –¥–æ m, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É\n'
  	'/ask n m'))

	# ef.register_user(conn, message.chat.id)
	
	# ef.ask_question(conn, message.chat.id, bot)

@bot.message_handler(commands=['ask'])
def send_welcome(message):

	ef.register_user(conn, message.chat.id)

	session_id = ef.get_user_session(conn, message.chat.id)

	question_ids = message.text.split(' ')[1:]

	ef.set_session_question_range(conn, message.chat.id, session_id, int(question_ids[0])-1, int(question_ids[1])-1)

	bot.send_message(message.chat.id, f'–¢–µ–±–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã —Å {question_ids[0]} –ø–æ {question_ids[1]}')

	ef.ask_question(conn, message.chat.id, bot)
	

@bot.message_handler(func=lambda message: int(message.text))
def echo_all(message):
	
	expected_answer = ef.get_expected_answer(conn, message.chat.id)

	user_answer = set(list(message.text))

	if ef.validate_answer_message(message.text):
		bot.send_message(message.chat.id, 'üôÄ —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞. –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —á–∏—Å–ª–æ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤')
	else:
		if user_answer == expected_answer:
			bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ üò∏')
			ef.finish_session(conn, message.chat.id)
			ef.ask_question(conn, message.chat.id, bot)
		else:
			bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ üòø')


bot.infinity_polling()
